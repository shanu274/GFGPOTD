class Solution{
    private static final int MOD = 1000000007;
    private static long modInverse(long base){
        return power(base, MOD - 2);
    }
    private static long power(long base, int expo){
        long result = 1;
        while(expo > 0){
            if(expo % 2 == 1){
                result = (result * base) % MOD;
            }
            base = (base * base) % MOD;
            expo /= 2;
        }
        return result;
    }
    private static int nCk(int n, int k){
        long num = 1;
        long den = 1;
        for(int i = 0; i < k; i++){
            num = (num *(n-i)) % MOD;
            den = (den *(i+1)) % MOD;
        }
        return (int) ((num * modInverse(den)) % MOD);
    }
    
    long numberOfPaths(int M, int N) {
        // Code Here
        return nCk(M+N - 2, M-1);
    }
    
}
